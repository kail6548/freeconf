name: Combine Subscription Files

on:
  schedule:
    - cron: '0 */2 * * *'   # اجرا هر ۲ ساعت
  workflow_dispatch:

jobs:
  combine:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Combine configs from URLs with counts
        run: |
          echo "📄 خواندن هدرهای myfeeds.txt"
          grep '^//' myfeeds.txt > header.txt

          echo "🌐 استخراج لینک‌ها"
          grep -E '^https?://' myfeeds.txt > urls.txt

          # ایجاد فایل نهایی با هدر
          cat header.txt > combined.txt
          rm header.txt

          mkdir -p url_configs
          rm -f url_configs/*.txt
          
          # یک فایل موقت برای نگهداری تمام کانفیگ‌ها قبل از افزودن به فایل نهایی
          > all_configs.txt

          i=0
          while read -r url || [[ -n "$url" ]]; do
            i=$((i+1))
            echo "⬇️ دریافت از $url"
            
            # ✨ تغییر اصلی: دانلود مستقیم به فایل برای جلوگیری از مصرف حافظه
            curl -fsSL --max-time 180 "$url" -o temp_content.txt
            
            # بررسی می‌کند که فایل خالی نباشد
            if [ ! -s temp_content.txt ]; then
              echo "⚠️ دریافت ناموفق یا فایل خالی از $url، ادامه می‌دهیم..."
              rm -f temp_content.txt
              continue
            fi

            # بررسی می‌کند که آیا محتوا Base64 است یا خیر (با بررسی خط اول)
            if head -n 1 temp_content.txt | grep -qE '^[A-Za-z0-9+/=]+$'; then
              echo "🤔 محتوا به نظر Base64 می‌رسد. تلاش برای دیکد کردن..."
              base64 -d temp_content.txt > temp_decoded.txt 2>/dev/null
              
              if [ -s temp_decoded.txt ]; then
                echo "✅ محتوای Base64 با موفقیت دیکد شد."
                mv temp_decoded.txt temp_content.txt
              else
                echo "⚠️ دیکد کردن Base64 ناموفق بود. از محتوای اصلی استفاده می‌شود."
                rm -f temp_decoded.txt
              fi
            fi
            
            # استخراج کانفیگ‌ها از فایل موقت
            grep -E '^[a-zA-Z0-9\-]+://' temp_content.txt > "url_configs/url_${i}.txt"
            
            count_before=$(wc -l < "url_configs/url_${i}.txt")
            echo "🔢 تعداد کانفیگ‌ها از لینک $i ($url): $count_before"
            
            # افزودن کانفیگ‌های این لینک به مجموع کانفیگ‌ها
            cat "url_configs/url_${i}.txt" >> all_configs.txt
            
            rm temp_content.txt
            sleep 1
          done < urls.txt

          # افزودن تمام کانفیگ‌های جمع‌آوری شده به فایل نهایی
          cat all_configs.txt >> combined.txt
          rm all_configs.txt

      - name: حذف کانفیگ‌های تکراری (Python)
        run: |
          echo "🔍 حذف کانفیگ‌های تکراری..."
          if [ -f "remove_duplicates.py" ]; then
            # پیدا کردن شماره خط اولین کانفیگ (اولین خطی که با // شروع نمی‌شود)
            HEADER_END_LINE=$(grep -n -m1 -v '^//' combined.txt | cut -d: -f1)
            
            if [ -z "$HEADER_END_LINE" ]; then
              echo "ℹ️ هیچ کانفیگی برای پاک‌سازی یافت نشد."
            else
              echo "🔍 جدا کردن هدر و کانفیگ‌ها..."
              head -n $((HEADER_END_LINE - 1)) combined.txt > header.txt
              tail -n +$HEADER_END_LINE combined.txt > configs_only.txt
              
              echo "🐍 اجرای اسکریپت پایتون..."
              python3 remove_duplicates.py < configs_only.txt > cleaned_configs.txt
              
              echo "🔄 ترکیب مجدد فایل..."
              cat header.txt cleaned_configs.txt > combined.txt
              
              rm header.txt configs_only.txt cleaned_configs.txt
              echo "✅ کانفیگ‌های تکراری حذف شدند."
            fi
          else
            echo "⚠️ فایل remove_duplicates.py یافت نشد. از حذف تکراری صرف‌نظر می‌شود."
          fi

          echo "📄 نمایش ۱۰ خط اول combined.txt:"
          head -n 10 combined.txt

          echo "📊 تعداد کل خطوط combined.txt:"
          wc -l combined.txt

      - name: Count configs remaining per URL after deduplication
        run: |
          echo "🔢 شمارش کانفیگ‌های باقی‌مانده هر لینک پس از حذف تکراری‌ها"
          HEADER_END=$(grep -n -m1 -v '^//' combined.txt | cut -d: -f1 || echo 1)
          tail -n +$HEADER_END combined.txt > combined_configs_only.txt
          for file in url_configs/url_*.txt; do
            if [ -f "$file" ]; then
              filename=$(basename "$file")
              url_index="${filename//[!0-9]/}"
              total_before=$(wc -l < "$file")
              count_after=$(grep -Fxf "$file" combined_configs_only.txt | wc -l || true)
              echo "لینک $url_index: کانفیگ‌های قبل: $total_before | بعد از حذف تکراری: $count_after"
            fi
          done
          rm combined_configs_only.txt

      - name: Create combined_random.txt with 500 random configs
        run: |
          echo "🎲 ایجاد فایل combined_random.txt با ۵۰۰ کانفیگ رندوم"
          HEADER_END=$(grep -n -m1 -v '^//' combined.txt | cut -d: -f1 || echo 1)
          grep '^//' combined.txt | grep -v '^//profile-title:' > temp_header.txt
          echo "//profile-title: Free_Config_Random" > random_header.txt
          cat temp_header.txt >> random_header.txt
          rm -f temp_header.txt
          tail -n +$HEADER_END combined.txt > configs_only.txt
          TOTAL_LINES=$(wc -l < configs_only.txt)
          if [ "$TOTAL_LINES" -le 500 ]; then
            cp configs_only.txt random_configs.txt
          else
            shuf -n 500 configs_only.txt > random_configs.txt
          fi
          cat random_header.txt random_configs.txt > combined_random.txt
          rm -f random_header.txt configs_only.txt random_configs.txt

      - name: Encode combined.txt to base64 (overwrite original)
        run: |
          echo "🔐 تبدیل combined.txt به base64..."
          base64 -w 0 combined.txt > tmp.txt && mv tmp.txt combined.txt
          echo "✅ فایل base64 شده در combined.txt ذخیره شد."

      - name: Encode combined_random.txt to base64 (overwrite original)
        run: |
          echo "🔐 تبدیل combined_random.txt به base64..."
          base64 -w 0 combined_random.txt > tmp_random.txt && mv tmp_random.txt combined_random.txt
          echo "✅ فایل base64 شده در combined_random.txt ذخیره شد."

      - name: Generate README with subscription links
        run: |
          echo "📘 ساخت README.md با لینک‌های مستقیم"
          RAW_LINK="https://raw.githubusercontent.com/${{ github.repository }}/main/combined.txt"
          RAW_LINK_RANDOM="https://raw.githubusercontent.com/${{ github.repository }}/main/combined_random.txt"
          echo "# 🔗 Combined Subscription (Base64)" > README.md
          echo "" >> README.md
          echo "This repository auto-generates a deduplicated, base64-encoded subscription file every 2 hours." >> README.md
          echo "" >> README.md
          echo "## 📥 Direct Subscription Links" >> README.md
          echo "" >> README.md
          echo "### Full combined file:" >> README.md
          echo '```' >> README.md
          echo "$RAW_LINK" >> README.md
          echo '```' >> README.md
          echo "" >> README.md
          echo "### Random 500 configs file:" >> README.md
          echo '```' >> README.md
          echo "$RAW_LINK_RANDOM" >> README.md
          echo '```' >> README.md
          echo "" >> README.md
          echo "Updated automatically via GitHub Actions." >> README.md

      - name: Commit and push if changed
        env:
          TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add combined.txt combined_random.txt README.md
          if git diff --cached --quiet; then
            echo "✅ بدون تغییر، نیازی به commit نیست."
          else
            git commit -m "🔄 Auto update combined files and README"
            git push "https://x-access-token:${TOKEN}@github.com/${{ github.repository }}" HEAD:main
          fi
